kids_men_dbp <- harmonise_data(exp_dsbp, kids_men_dbp)
# Confounder-outcome associations
# Search for GWAS significant SNPs. It performs LD-Clumping to return only
# independent significant associations.
# Snps associated with confounder:
conf <- extract_instruments(outcomes = i, # Confounder ID
p1 = 5e-08, # Significance threshold
clump = T, # Clumping
p2=5e-08, # Secondary clumping threshold
r2 = 0.001, # Clumping r2 clut off
kb = 10000, # Clumping distance cutoff
access_token = ieugwasr::check_access_token(),
force_server = FALSE)
# Confounder instruments, effect size on the outcome
conf_kids <- extract_outcome_data(conf$SNP, # Snps ID
k, # Outcome
proxies = T, # LD tags
rsq = 0.8, # Minimum LD rsq value
align_alleles = 1, # Align tag alleles to target alleles
palindromes = 1, # Allow palindromic snps
maf_threshold = 0.3, # MAF threshold to try to infern palindromic SNPs
access_token = ieugwasr::check_access_token(),
splitsize = 10000,
proxy_splitsize = 500)
conf_kids <- harmonise_data(conf, conf_kids, action = 2)
conf_kids_mr <- TwoSampleMR::mr(conf_kids, method_list=c("mr_ivw","mr_egger_regression","mr_weighted_median", "mr_weighted_mode"))
conf_kids_mr<-merge(conf_kids_mr,mr_heterogeneity(conf_kids), by=c("id.outcome", "method", "id.exposure", "outcome","exposure") , all=TRUE )
dat<-kids_men_dbp # exp - outcome association
if (conf_kids_mr$Q_pval[1] < 0.05){ # if there is no heterogeneity
for (snp in dat$SNP){
a <- TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp], # Byz: Beta instrument exp-outcome (SNP-)
SEgo=dat$se.outcome[dat$SNP==snp],  # SEyz: Se instrument exp-outcome
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp], # Bkz: Beta instrument exp-outcome in exp-confunder
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp], # SEkz: Se instrument exp-outcome in dbp-confounder
Bco=conf_kids_mr$b[conf_kids_mr$method=="Weighted median"], # MR result of weighted median
SEco=conf_kids_mr$se[conf_kids_mr$method=="Weighted median"]) # MR result of weighted median
dat$beta.outcome[dat$SNP==snp]<-a$Bgo # New Byz
dat$se.outcome[dat$SNP==snp]<-a$BSSE # New SEyz
}
}else {
for (snp in dat$SNP){
a<-TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp],
SEgo=dat$se.outcome[dat$SNP==snp],
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp],
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp],
Bco=conf_kids_mr$b[conf_kids_mr$method=="Inverse variance weighted"],
SEco=conf_kids_mr$se[conf_kids_mr$method=="Inverse variance weighted"])
dat$beta.outcome[dat$SNP==snp]<-a$Bgo #Inverse variance weighted
dat$se.outcome[dat$SNP==snp]<-a$BSSE
}
}
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
beta[num] <- exp(IVW$beta_IVWcorrel)
se[num]   <- IVW$se_IVWcorrel.random
cu[num]   <- exp(IVWcorrel.random+1.96*IVW$se_IVWcorrel.random)
cl[num]   <- exp(IVWcorrel.random-1.96*IVW$se_IVWcorrel.random)
num <- num + 1
}
rm(list = ls())
pacman::p_load('readr','devtools','dplyr','TwoSampleMR','LDlinkR','forestplot')
devtools::install_github("bar-woolf/TwoStepCisMR")
library(TwoStepCisMR)
pathToData <- 'C:/Users/martaa/Desktop/Projects/PDE5_AD_MendelianRandomisation/'
# Mendelian randomisation ------------------------------------------------------
beta <- numeric()
se   <- numeric()
cu   <- numeric()
cl   <- numeric()
j <- 1
for (i in c('DBP','SBP')){
exp <- read.table(paste0('iv_',i,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
out <- read.table(paste0('iv_AlzD_',i,'.txt')) %>%
mutate(id.outcome = 'outcome',
outcome = 'outcome',
eaf.outcome = NA) %>%
rename(beta.outcome = beta, se.outcome = se, effect_allele.outcome = effect_allele,
other_allele.outcome = other_allele)
dat   <- harmonise_data(exp,out)
res <- as.data.frame(IVWcorrel(betaYG = dat$beta.outcome,  sebetaYG = dat$se.outcome,
betaXG = dat$beta.exposure, sebetaXG = dat$se.exposure,
rho = ld_matrix(dat$SNP)))
beta[j] <- exp(res$beta_IVWcorrel)
se[j] <- res$se_IVWcorrel.random
cu[j] <- exp(res$beta_IVWcorrel + 1.96*res$se_IVWcorrel.random)
cl[j] <- exp(res$beta_IVWcorrel - 1.96*res$se_IVWcorrel.random)
j <- j + 1
}
rm(list = ls())
pacman::p_load('readr','devtools','dplyr','TwoSampleMR','LDlinkR','forestplot')
devtools::install_github("bar-woolf/TwoStepCisMR")
library(TwoStepCisMR)
pathToData <- 'C:/Users/martaa/Desktop/Projects/PDE5_AD_MendelianRandomisation/'
# Mendelian randomisation ------------------------------------------------------
beta <- numeric()
se   <- numeric()
cu   <- numeric()
cl   <- numeric()
j <- 1
rm(list = ls())
pacman::p_load('readr','devtools','dplyr','TwoSampleMR','LDlinkR','forestplot')
devtools::install_github("bar-woolf/TwoStepCisMR")
library(TwoStepCisMR)
pathToData <- 'C:/Users/martaa/Desktop/Projects/PDE5_AD_MendelianRandomisation/'
# Mendelian randomisation ------------------------------------------------------
beta <- numeric()
se   <- numeric()
cu   <- numeric()
cl   <- numeric()
j <- 1
for (i in c('DBP','SBP')){
exp <- read.table(paste0('iv_',i,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
out <- read.table(paste0('iv_AlzD_',i,'.txt')) %>%
mutate(id.outcome = 'outcome',
outcome = 'outcome',
eaf.outcome = NA) %>%
rename(beta.outcome = beta, se.outcome = se, effect_allele.outcome = effect_allele,
other_allele.outcome = other_allele)
dat   <- harmonise_data(exp,out)
res <- as.data.frame(IVWcorrel(betaYG = dat$beta.outcome,  sebetaYG = dat$se.outcome,
betaXG = dat$beta.exposure, sebetaXG = dat$se.exposure,
rho = ld_matrix(dat$SNP)))
beta[j] <- exp(res$beta_IVWcorrel)
se[j] <- res$se_IVWcorrel.random
cu[j] <- exp(res$beta_IVWcorrel + 1.96*res$se_IVWcorrel.random)
cl[j] <- exp(res$beta_IVWcorrel - 1.96*res$se_IVWcorrel.random)
j <- j + 1
}
t <- data.frame(OR = beta, SE = se, upper = cu, lower = cl, Exposure = c('Diastolic blood pressure','Systolic blood pressure'))
write.csv(t, 'mr_results.csv')
#Two-step MR -------------------------------------------------------------------
beta <- numeric()
se   <- numeric()
cu   <- numeric()
cl   <- numeric()
num <- 1
i <- "ukb-b-19953" # BMI
j <- c('DBP','SBP') # dbp, sbp
k <- 'ieu-a-297' # Alzheimer
for(i in j){
exp_dsbp <- read.table(paste0('iv_',j,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- harmonise_data(exp_dsbp,conf_dbp)
kids_men_dbp <- extract_outcome_data(exp_dsbp$SNP, k, proxies = F)
kids_men_dbp <- harmonise_data(exp_dsbp, kids_men_dbp)
# Confounder-outcome associations
# Search for GWAS significant SNPs. It performs LD-Clumping to return only
# independent significant associations.
# Snps associated with confounder:
conf <- extract_instruments(outcomes = i, # Confounder ID
p1 = 5e-08, # Significance threshold
clump = T, # Clumping
p2=5e-08, # Secondary clumping threshold
r2 = 0.001, # Clumping r2 clut off
kb = 10000, # Clumping distance cutoff
access_token = ieugwasr::check_access_token(),
force_server = FALSE)
# Confounder instruments, effect size on the outcome
conf_kids <- extract_outcome_data(conf$SNP, # Snps ID
k, # Outcome
proxies = T, # LD tags
rsq = 0.8, # Minimum LD rsq value
align_alleles = 1, # Align tag alleles to target alleles
palindromes = 1, # Allow palindromic snps
maf_threshold = 0.3, # MAF threshold to try to infern palindromic SNPs
access_token = ieugwasr::check_access_token(),
splitsize = 10000,
proxy_splitsize = 500)
conf_kids <- harmonise_data(conf, conf_kids, action = 2)
conf_kids_mr <- TwoSampleMR::mr(conf_kids, method_list=c("mr_ivw","mr_egger_regression","mr_weighted_median", "mr_weighted_mode"))
conf_kids_mr<-merge(conf_kids_mr,mr_heterogeneity(conf_kids), by=c("id.outcome", "method", "id.exposure", "outcome","exposure") , all=TRUE )
dat<-kids_men_dbp # exp - outcome association
if (conf_kids_mr$Q_pval[1] < 0.05){ # if there is no heterogeneity
for (snp in dat$SNP){
a <- TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp], # Byz: Beta instrument exp-outcome (SNP-)
SEgo=dat$se.outcome[dat$SNP==snp],  # SEyz: Se instrument exp-outcome
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp], # Bkz: Beta instrument exp-outcome in exp-confunder
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp], # SEkz: Se instrument exp-outcome in dbp-confounder
Bco=conf_kids_mr$b[conf_kids_mr$method=="Weighted median"], # MR result of weighted median
SEco=conf_kids_mr$se[conf_kids_mr$method=="Weighted median"]) # MR result of weighted median
dat$beta.outcome[dat$SNP==snp]<-a$Bgo # New Byz
dat$se.outcome[dat$SNP==snp]<-a$BSSE # New SEyz
}
}else {
for (snp in dat$SNP){
a<-TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp],
SEgo=dat$se.outcome[dat$SNP==snp],
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp],
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp],
Bco=conf_kids_mr$b[conf_kids_mr$method=="Inverse variance weighted"],
SEco=conf_kids_mr$se[conf_kids_mr$method=="Inverse variance weighted"])
dat$beta.outcome[dat$SNP==snp]<-a$Bgo #Inverse variance weighted
dat$se.outcome[dat$SNP==snp]<-a$BSSE
}
}
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
beta[num] <- exp(IVW$beta_IVWcorrel)
se[num]   <- IVW$se_IVWcorrel.random
cu[num]   <- exp(IVWcorrel.random+1.96*IVW$se_IVWcorrel.random)
cl[num]   <- exp(IVWcorrel.random-1.96*IVW$se_IVWcorrel.random)
num <- num + 1
}
j
i
exp_dsbp <- read.table(paste0('iv_',j,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
paste0('iv_',j,'.txt')
for(j in c('DBP','SBP')){
exp_dsbp <- read.table(paste0('iv_',j,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- harmonise_data(exp_dsbp,conf_dbp)
kids_men_dbp <- extract_outcome_data(exp_dsbp$SNP, k, proxies = F)
kids_men_dbp <- harmonise_data(exp_dsbp, kids_men_dbp)
# Confounder-outcome associations
# Search for GWAS significant SNPs. It performs LD-Clumping to return only
# independent significant associations.
# Snps associated with confounder:
conf <- extract_instruments(outcomes = i, # Confounder ID
p1 = 5e-08, # Significance threshold
clump = T, # Clumping
p2=5e-08, # Secondary clumping threshold
r2 = 0.001, # Clumping r2 clut off
kb = 10000, # Clumping distance cutoff
access_token = ieugwasr::check_access_token(),
force_server = FALSE)
# Confounder instruments, effect size on the outcome
conf_kids <- extract_outcome_data(conf$SNP, # Snps ID
k, # Outcome
proxies = T, # LD tags
rsq = 0.8, # Minimum LD rsq value
align_alleles = 1, # Align tag alleles to target alleles
palindromes = 1, # Allow palindromic snps
maf_threshold = 0.3, # MAF threshold to try to infern palindromic SNPs
access_token = ieugwasr::check_access_token(),
splitsize = 10000,
proxy_splitsize = 500)
conf_kids <- harmonise_data(conf, conf_kids, action = 2)
conf_kids_mr <- TwoSampleMR::mr(conf_kids, method_list=c("mr_ivw","mr_egger_regression","mr_weighted_median", "mr_weighted_mode"))
conf_kids_mr<-merge(conf_kids_mr,mr_heterogeneity(conf_kids), by=c("id.outcome", "method", "id.exposure", "outcome","exposure") , all=TRUE )
dat<-kids_men_dbp # exp - outcome association
if (conf_kids_mr$Q_pval[1] < 0.05){ # if there is no heterogeneity
for (snp in dat$SNP){
a <- TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp], # Byz: Beta instrument exp-outcome (SNP-)
SEgo=dat$se.outcome[dat$SNP==snp],  # SEyz: Se instrument exp-outcome
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp], # Bkz: Beta instrument exp-outcome in exp-confunder
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp], # SEkz: Se instrument exp-outcome in dbp-confounder
Bco=conf_kids_mr$b[conf_kids_mr$method=="Weighted median"], # MR result of weighted median
SEco=conf_kids_mr$se[conf_kids_mr$method=="Weighted median"]) # MR result of weighted median
dat$beta.outcome[dat$SNP==snp]<-a$Bgo # New Byz
dat$se.outcome[dat$SNP==snp]<-a$BSSE # New SEyz
}
}else {
for (snp in dat$SNP){
a<-TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp],
SEgo=dat$se.outcome[dat$SNP==snp],
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp],
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp],
Bco=conf_kids_mr$b[conf_kids_mr$method=="Inverse variance weighted"],
SEco=conf_kids_mr$se[conf_kids_mr$method=="Inverse variance weighted"])
dat$beta.outcome[dat$SNP==snp]<-a$Bgo #Inverse variance weighted
dat$se.outcome[dat$SNP==snp]<-a$BSSE
}
}
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
beta[num] <- exp(IVW$beta_IVWcorrel)
se[num]   <- IVW$se_IVWcorrel.random
cu[num]   <- exp(IVWcorrel.random+1.96*IVW$se_IVWcorrel.random)
cl[num]   <- exp(IVWcorrel.random-1.96*IVW$se_IVWcorrel.random)
num <- num + 1
}
j
exp_dsbp <- read.table(paste0('iv_',j,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- harmonise_data(exp_dsbp,conf_dbp)
exp_dsbp <- read.table(paste0('iv_',j,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- harmonise_data(exp_dsbp,conf_dbp)
conf_dbp
i <- "ukb-b-19953" # BMI
kids_men_dbp <- extract_outcome_data(exp_dsbp$SNP, k, proxies = F)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- harmonise_data(exp_dsbp,conf_dbp)
kids_men_dbp <- extract_outcome_data(exp_dsbp$SNP, k, proxies = F)
kids_men_dbp <- harmonise_data(exp_dsbp, kids_men_dbp)
# Snps associated with confounder:
conf <- extract_instruments(outcomes = i, # Confounder ID
p1 = 5e-08, # Significance threshold
clump = T, # Clumping
p2=5e-08, # Secondary clumping threshold
r2 = 0.001, # Clumping r2 clut off
kb = 10000, # Clumping distance cutoff
access_token = ieugwasr::check_access_token(),
force_server = FALSE)
# Confounder instruments, effect size on the outcome
conf_kids <- extract_outcome_data(conf$SNP, # Snps ID
k, # Outcome
proxies = T, # LD tags
rsq = 0.8, # Minimum LD rsq value
align_alleles = 1, # Align tag alleles to target alleles
palindromes = 1, # Allow palindromic snps
maf_threshold = 0.3, # MAF threshold to try to infern palindromic SNPs
access_token = ieugwasr::check_access_token(),
splitsize = 10000,
proxy_splitsize = 500)
conf_kids <- harmonise_data(conf, conf_kids, action = 2)
conf_kids_mr <- TwoSampleMR::mr(conf_kids, method_list=c("mr_ivw","mr_egger_regression","mr_weighted_median", "mr_weighted_mode"))
conf_kids_mr<-merge(conf_kids_mr,mr_heterogeneity(conf_kids), by=c("id.outcome", "method", "id.exposure", "outcome","exposure") , all=TRUE )
dat<-kids_men_dbp # exp - outcome association
if (conf_kids_mr$Q_pval[1] < 0.05){ # if there is no heterogeneity
for (snp in dat$SNP){
a <- TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp], # Byz: Beta instrument exp-outcome (SNP-)
SEgo=dat$se.outcome[dat$SNP==snp],  # SEyz: Se instrument exp-outcome
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp], # Bkz: Beta instrument exp-outcome in exp-confunder
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp], # SEkz: Se instrument exp-outcome in dbp-confounder
Bco=conf_kids_mr$b[conf_kids_mr$method=="Weighted median"], # MR result of weighted median
SEco=conf_kids_mr$se[conf_kids_mr$method=="Weighted median"]) # MR result of weighted median
dat$beta.outcome[dat$SNP==snp]<-a$Bgo # New Byz
dat$se.outcome[dat$SNP==snp]<-a$BSSE # New SEyz
}
}else {
for (snp in dat$SNP){
a<-TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp],
SEgo=dat$se.outcome[dat$SNP==snp],
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp],
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp],
Bco=conf_kids_mr$b[conf_kids_mr$method=="Inverse variance weighted"],
SEco=conf_kids_mr$se[conf_kids_mr$method=="Inverse variance weighted"])
dat$beta.outcome[dat$SNP==snp]<-a$Bgo #Inverse variance weighted
dat$se.outcome[dat$SNP==snp]<-a$BSSE
}
}
dat
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
beta[num] <- exp(IVW$beta_IVWcorrel)
se[num]   <- IVW$se_IVWcorrel.random
cu[num]   <- exp(IVWcorrel.random+1.96*IVW$se_IVWcorrel.random)
cl[num]   <- exp(IVWcorrel.random-1.96*IVW$se_IVWcorrel.random)
cu[num]   <- exp(IVW$beta_IVWcorrel+1.96*IVW$se_IVWcorrel.random)
cl[num]   <- exp(IVW$beta_IVWcorrel-1.96*IVW$se_IVWcorrel.random)
num <- num + 1
exp_dsbp <- read.table(paste0('iv_',j,'.txt')) %>%
mutate(id.exposure = 'exposure',
exposure = 'exposure') %>%
rename(beta.exposure = beta, se.exposure = se, effect_allele.exposure = effect_allele,
other_allele.exposure = other_allele, eaf.exposure = eaf)
conf_dbp <- extract_outcome_data(exp_dsbp$SNP, i, proxies = F)
conf_dbp <- harmonise_data(exp_dsbp,conf_dbp)
kids_men_dbp <- extract_outcome_data(exp_dsbp$SNP, k, proxies = F)
kids_men_dbp <- harmonise_data(exp_dsbp, kids_men_dbp)
# Snps associated with confounder:
conf <- extract_instruments(outcomes = i, # Confounder ID
p1 = 5e-08, # Significance threshold
clump = T, # Clumping
p2=5e-08, # Secondary clumping threshold
r2 = 0.001, # Clumping r2 clut off
kb = 10000, # Clumping distance cutoff
access_token = ieugwasr::check_access_token(),
force_server = FALSE)
# Confounder instruments, effect size on the outcome
conf_kids <- extract_outcome_data(conf$SNP, # Snps ID
k, # Outcome
proxies = T, # LD tags
rsq = 0.8, # Minimum LD rsq value
align_alleles = 1, # Align tag alleles to target alleles
palindromes = 1, # Allow palindromic snps
maf_threshold = 0.3, # MAF threshold to try to infern palindromic SNPs
access_token = ieugwasr::check_access_token(),
splitsize = 10000,
proxy_splitsize = 500)
conf_kids <- harmonise_data(conf, conf_kids, action = 2)
conf_kids_mr <- TwoSampleMR::mr(conf_kids, method_list=c("mr_ivw","mr_egger_regression","mr_weighted_median", "mr_weighted_mode"))
conf_kids_mr<-merge(conf_kids_mr,mr_heterogeneity(conf_kids), by=c("id.outcome", "method", "id.exposure", "outcome","exposure") , all=TRUE )
dat<-kids_men_dbp # exp - outcome association
if (conf_kids_mr$Q_pval[1] < 0.05){ # if there is no heterogeneity
for (snp in dat$SNP){
a <- TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp], # Byz: Beta instrument exp-outcome (SNP-)
SEgo=dat$se.outcome[dat$SNP==snp],  # SEyz: Se instrument exp-outcome
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp], # Bkz: Beta instrument exp-outcome in exp-confunder
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp], # SEkz: Se instrument exp-outcome in dbp-confounder
Bco=conf_kids_mr$b[conf_kids_mr$method=="Weighted median"], # MR result of weighted median
SEco=conf_kids_mr$se[conf_kids_mr$method=="Weighted median"]) # MR result of weighted median
dat$beta.outcome[dat$SNP==snp]<-a$Bgo # New Byz
dat$se.outcome[dat$SNP==snp]<-a$BSSE # New SEyz
}
}else {
for (snp in dat$SNP){
a<-TSCMR(Bgo=dat$beta.outcome[dat$SNP==snp],
SEgo=dat$se.outcome[dat$SNP==snp],
Bgc=conf_dbp$beta.outcome[conf_dbp$SNP==snp],
SEgc=conf_dbp$se.outcome[conf_dbp$SNP==snp],
Bco=conf_kids_mr$b[conf_kids_mr$method=="Inverse variance weighted"],
SEco=conf_kids_mr$se[conf_kids_mr$method=="Inverse variance weighted"])
dat$beta.outcome[dat$SNP==snp]<-a$Bgo #Inverse variance weighted
dat$se.outcome[dat$SNP==snp]<-a$BSSE
}
}
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
IVW <- data.frame(IVWcorrel(betaYG=dat$beta.outcome,
sebetaYG=dat$se.outcome,
betaXG=dat$beta.exposure,
sebetaXG=dat$se.exposure,
rho=ld_matrix(dat$SNP)))
beta[num] <- exp(IVW$beta_IVWcorrel)
se[num]   <- IVW$se_IVWcorrel.random
cu[num]   <- exp(IVW$beta_IVWcorrel+1.96*IVW$se_IVWcorrel.random)
cl[num]   <- exp(IVW$beta_IVWcorrel-1.96*IVW$se_IVWcorrel.random)
num <- num + 1
t <- data.frame(OR = beta, SE = se, upper = cu, lower = cl, Exposure = c('Diastolic blood pressure','Systolic blood pressure'))
write.csv(t, 'mr_results_teoStep.csv')
dat_snps
dat
help(IVWcorrel)
ld_matrix
ld_matrix(dat$SNP)
ao <- available_outcomes()
library('TwoSampleMR')
ao <- available_outcomes()
head(ao)
ao %>% filter(trait %in% 'Alzheimer')
ao %>% filter(author == 'Wightman')
library('dplyr')
ao %>% filter(author == 'Wightman')
ao %>% filter(author == 'Wightman')
ao %>% filter(year == 2021)
ao %>% filter(year == 2021 & trait == 'Alzheimer')
ao %>% filter(year == 2021 & contains(trait,'Alzheimer'))
help(contains)
ao %>% filter(trait %in% 'Alzheimer')
ao %>% filter(trait %in% c('Alzheimer')
)
ao
ao %>% filter(grepl('Alzheimer|alzheimer', trait) & year == 2021)
ao %>% filter(grepl('Alzheimer|alzheimer', trait) & year == 2021)
read_table('C:/Users/martaa/OneDrive - Nexus365/1_PDE5_AlzD/SummaryStats/AlzD_wightman_2021_excluding_23andme/PGCALZ2ExcludingUKBand23andME_METALInverseVariance_MetaAnalysis.txt.gz')
